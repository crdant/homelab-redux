#@ load("@ytt:data", "data")
---
global:
  tlsDisable: false 

injector:
  enabled: false 

server:
  authDelegator:
    enabled: false

  # Enables a headless service to be used by the Vault Statefulset
  service:
    enabled: true

    # Configures the service type for the main Vault service.  Can be ClusterIP
    # or NodePort.
    type: LoadBalancer

   # Port on which Vault server is listening
    port: 443

  dataStorage:
    storageClass: vsan

  # extraEnvironmentVars is a list of extra enviroment variables to set with the stateful set. These could be
  # used to include variables required for auto-unseal.
  #@yaml/text-templated-strings
  extraEnvironmentVars: 
    VAULT_CACERT: /vault/userconfig/(@= data.values.tls_secret @)/ca.crt

  # extraVolumes is a list of extra volumes to mount. These will be exposed
  # to Vault in the path `/vault/userconfig/<name>/`. The value below is
  # an array of objects, examples are shown below.
  extraVolumes:
  - type: secret
    name: #@ data.values.gcp_credentials_secret
  - type: secret
    name: #@ data.values.tls_secret
    
  # Run Vault in "standalone" mode. This is the default mode that will deploy if
  # no arguments are given to helm. This requires a PVC for data storage to use
  # the "file" backend.  This mode is not highly available and should not be scaled
  # past a single replica.

  #@yaml/text-templated-strings
  standalone:
    config: |
      ui = true

      listener "tcp" {
        address = "[::]:8200"
        cluster_address = "[::]:8201"
        tls_disable = 0
        tls_cert_file = "/vault/userconfig/(@= data.values.tls_secret @)/tls.crt"
        tls_key_file = "/vault/userconfig/(@= data.values.tls_secret @)/tls.key"
        tls_client_ca_file = "/vault/userconfig/(@= data.values.tls_secret @)/ca.crt"
      }
      storage "file" {
        path = "/vault/data"
      }

      # Example configuration for using auto-unseal, using Google Cloud KMS. The
      # GKMS keys must already exist, and the cluster must have a service account
      # that is authorized to access GCP KMS.
      seal "gcpckms" {
        credentials = "/vault/userconfig/(@= data.values.gcp_credentials_secret @)/credentials.json"
        project     = "(@= data.values.project @)"
        region      = "global"
        key_ring    = "(@= data.values.unseal_key.ring @)"
        crypto_key  = "(@= data.values.unseal_key.key @)"
      }